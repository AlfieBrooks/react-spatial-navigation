{"version":3,"sources":["../src/measureLayout.js"],"names":["ELEMENT_NODE","getRect","node","offsetParent","height","offsetHeight","width","offsetWidth","left","offsetLeft","top","offsetTop","nodeType","scrollLeft","scrollTop","measureLayout","callback","relativeNode","parentNode","setTimeout","relativeRect","x","y"],"mappings":";;;;;AAAA,IAAMA,eAAe,CAArB;;AAEA,IAAMC,UAAU,SAAVA,OAAU,CAACC,IAAD,EAAU;AAAA,MACnBC,YADmB,GACHD,IADG,CACnBC,YADmB;;AAExB,MAAMC,SAASF,KAAKG,YAApB;AACA,MAAMC,QAAQJ,KAAKK,WAAnB;AACA,MAAIC,OAAON,KAAKO,UAAhB;AACA,MAAIC,MAAMR,KAAKS,SAAf;;AAEA,SAAOR,gBAAgBA,aAAaS,QAAb,KAA0BZ,YAAjD,EAA+D;AAC7DQ,YAAQL,aAAaM,UAAb,GAA0BN,aAAaU,UAA/C;AACAH,WAAOP,aAAaQ,SAAb,GAAyBR,aAAaW,SAA7C;AAF6D,wBAG3CX,YAH2C;AAG3DA,gBAH2D,iBAG3DA,YAH2D;AAI9D;;AAED,SAAO;AACLC,kBADK;AAELI,cAFK;AAGLE,YAHK;AAILJ;AAJK,GAAP;AAMD,CAnBD;;AAqBA,IAAMS,gBAAgB,SAAhBA,aAAgB,CAACb,IAAD,EAAOc,QAAP,EAAoB;AACxC,MAAMC,eAAef,QAAQA,KAAKgB,UAAlC;;AAEA,MAAIhB,QAAQe,YAAZ,EAA0B;AACxBE,eAAW,YAAM;AACf,UAAMC,eAAenB,QAAQgB,YAAR,CAArB;;AADe,qBAEoBhB,QAAQC,IAAR,CAFpB;AAAA,UAERE,MAFQ,YAERA,MAFQ;AAAA,UAEAI,IAFA,YAEAA,IAFA;AAAA,UAEME,GAFN,YAEMA,GAFN;AAAA,UAEWJ,KAFX,YAEWA,KAFX;;AAGf,UAAMe,IAAIb,OAAOY,aAAaZ,IAA9B;AACA,UAAMc,IAAIZ,MAAMU,aAAaV,GAA7B;;AAEAM,eAASK,CAAT,EAAYC,CAAZ,EAAehB,KAAf,EAAsBF,MAAtB,EAA8BI,IAA9B,EAAoCE,GAApC;AACD,KAPD,EAOG,CAPH;AAQD;AACF,CAbD;;kBAeeK,a","file":"measureLayout.js","sourcesContent":["const ELEMENT_NODE = 1;\n\nconst getRect = (node) => {\n  let {offsetParent} = node;\n  const height = node.offsetHeight;\n  const width = node.offsetWidth;\n  let left = node.offsetLeft;\n  let top = node.offsetTop;\n\n  while (offsetParent && offsetParent.nodeType === ELEMENT_NODE) {\n    left += offsetParent.offsetLeft - offsetParent.scrollLeft;\n    top += offsetParent.offsetTop - offsetParent.scrollTop;\n    ({offsetParent} = offsetParent);\n  }\n\n  return {\n    height,\n    left,\n    top,\n    width\n  };\n};\n\nconst measureLayout = (node, callback) => {\n  const relativeNode = node && node.parentNode;\n\n  if (node && relativeNode) {\n    setTimeout(() => {\n      const relativeRect = getRect(relativeNode);\n      const {height, left, top, width} = getRect(node);\n      const x = left - relativeRect.left;\n      const y = top - relativeRect.top;\n\n      callback(x, y, width, height, left, top);\n    }, 0);\n  }\n};\n\nexport default measureLayout;\n"]}